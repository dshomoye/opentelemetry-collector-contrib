// Copyright The OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/config/configmodels"
	"go.opentelemetry.io/collector/consumer/pdata"
)

// Type is the component type name.
const Type configmodels.Type = "kafkametricsreceiver"

// MetricIntf is an interface to generically interact with generated metric.
type MetricIntf interface {
	Name() string
	New() pdata.Metric
	Init(metric pdata.Metric)
}

// Intentionally not exposing this so that it is opaque and can change freely.
type metricImpl struct {
	name     string
	initFunc func(pdata.Metric)
}

// Name returns the metric name.
func (m *metricImpl) Name() string {
	return m.name
}

// New creates a metric object preinitialized.
func (m *metricImpl) New() pdata.Metric {
	metric := pdata.NewMetric()
	m.Init(metric)
	return metric
}

// Init initializes the provided metric object.
func (m *metricImpl) Init(metric pdata.Metric) {
	m.initFunc(metric)
}

type metricStruct struct {
	BrokersCount              MetricIntf
	ConsumerGroupLag          MetricIntf
	ConsumerGroupLagSum       MetricIntf
	ConsumerGroupMembersCount MetricIntf
	ConsumerGroupOffset       MetricIntf
	ConsumerGroupOffsetSum    MetricIntf
	PartitionCurrentOffset    MetricIntf
	PartitionOldestOffset     MetricIntf
	PartitionReplicas         MetricIntf
	PartitionReplicasInSync   MetricIntf
	TopicPartitions           MetricIntf
}

// Names returns a list of all the metric name strings.
func (m *metricStruct) Names() []string {
	return []string{
		"brokers.count",
		"consumer_group.lag",
		"consumer_group.lag_sum",
		"consumer_group.members.count",
		"consumer_group.offset",
		"consumer_group.offset_sum",
		"partition.current_offset",
		"partition.oldest_offset",
		"partition.replicas",
		"partition.replicas_in_sync",
		"topic.partitions",
	}
}

var metricsByName = map[string]MetricIntf{
	"brokers.count":                Metrics.BrokersCount,
	"consumer_group.lag":           Metrics.ConsumerGroupLag,
	"consumer_group.lag_sum":       Metrics.ConsumerGroupLagSum,
	"consumer_group.members.count": Metrics.ConsumerGroupMembersCount,
	"consumer_group.offset":        Metrics.ConsumerGroupOffset,
	"consumer_group.offset_sum":    Metrics.ConsumerGroupOffsetSum,
	"partition.current_offset":     Metrics.PartitionCurrentOffset,
	"partition.oldest_offset":      Metrics.PartitionOldestOffset,
	"partition.replicas":           Metrics.PartitionReplicas,
	"partition.replicas_in_sync":   Metrics.PartitionReplicasInSync,
	"topic.partitions":             Metrics.TopicPartitions,
}

func (m *metricStruct) ByName(n string) MetricIntf {
	return metricsByName[n]
}

func (m *metricStruct) FactoriesByName() map[string]func() pdata.Metric {
	return map[string]func() pdata.Metric{
		Metrics.BrokersCount.Name():              Metrics.BrokersCount.New,
		Metrics.ConsumerGroupLag.Name():          Metrics.ConsumerGroupLag.New,
		Metrics.ConsumerGroupLagSum.Name():       Metrics.ConsumerGroupLagSum.New,
		Metrics.ConsumerGroupMembersCount.Name(): Metrics.ConsumerGroupMembersCount.New,
		Metrics.ConsumerGroupOffset.Name():       Metrics.ConsumerGroupOffset.New,
		Metrics.ConsumerGroupOffsetSum.Name():    Metrics.ConsumerGroupOffsetSum.New,
		Metrics.PartitionCurrentOffset.Name():    Metrics.PartitionCurrentOffset.New,
		Metrics.PartitionOldestOffset.Name():     Metrics.PartitionOldestOffset.New,
		Metrics.PartitionReplicas.Name():         Metrics.PartitionReplicas.New,
		Metrics.PartitionReplicasInSync.Name():   Metrics.PartitionReplicasInSync.New,
		Metrics.TopicPartitions.Name():           Metrics.TopicPartitions.New,
	}
}

// Metrics contains a set of methods for each metric that help with
// manipulating those metrics.
var Metrics = &metricStruct{
	&metricImpl{
		"brokers.count",
		func(metric pdata.Metric) {
			metric.SetName("brokers.count")
			metric.SetDescription("Number of brokers in the cluster.")
			metric.SetUnit("brokers")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"consumer_group.lag",
		func(metric pdata.Metric) {
			metric.SetName("consumer_group.lag")
			metric.SetDescription("Current approximate lag of consumer group at partition of topic")
			metric.SetUnit("{messages}")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"consumer_group.lag_sum",
		func(metric pdata.Metric) {
			metric.SetName("consumer_group.lag_sum")
			metric.SetDescription("Current approximate sum of consumer group lag across all partitions of topic")
			metric.SetUnit("{messages}")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"consumer_group.members.count",
		func(metric pdata.Metric) {
			metric.SetName("consumer_group.members.count")
			metric.SetDescription("Count of members in the consumer group")
			metric.SetUnit("members")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"consumer_group.offset",
		func(metric pdata.Metric) {
			metric.SetName("consumer_group.offset")
			metric.SetDescription("Current offset of the consumer group at partition of topic")
			metric.SetUnit("{messages}")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"consumer_group.offset_sum",
		func(metric pdata.Metric) {
			metric.SetName("consumer_group.offset_sum")
			metric.SetDescription("Sum of consumer group offset across partitions of topic")
			metric.SetUnit("{messages}")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"partition.current_offset",
		func(metric pdata.Metric) {
			metric.SetName("partition.current_offset")
			metric.SetDescription("Current offset of partition of topic.")
			metric.SetUnit("{messages}")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"partition.oldest_offset",
		func(metric pdata.Metric) {
			metric.SetName("partition.oldest_offset")
			metric.SetDescription("Oldest offset of partition of topic")
			metric.SetUnit("{messages}")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"partition.replicas",
		func(metric pdata.Metric) {
			metric.SetName("partition.replicas")
			metric.SetDescription("Number of replicas for partition of topic")
			metric.SetUnit("replicas")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"partition.replicas_in_sync",
		func(metric pdata.Metric) {
			metric.SetName("partition.replicas_in_sync")
			metric.SetDescription("Number of synchronized replicas of partition")
			metric.SetUnit("replicas")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
	&metricImpl{
		"topic.partitions",
		func(metric pdata.Metric) {
			metric.SetName("topic.partitions")
			metric.SetDescription("Number of partitions in topic.")
			metric.SetUnit("partitions")
			metric.SetDataType(pdata.MetricDataTypeIntGauge)
		},
	},
}

// M contains a set of methods for each metric that help with
// manipulating those metrics. M is an alias for Metrics
var M = Metrics

// Labels contains the possible metric labels that can be used.
var Labels = struct {
	// Group (The ID (string) of a consumer group)
	Group string
	// Partition (The number (integer) of the partition)
	Partition string
	// Topic (The ID (integer) of a topic)
	Topic string
}{
	"group",
	"partition",
	"topic",
}

// L contains the possible metric labels that can be used. L is an alias for
// Labels.
var L = Labels
